#!/usr/bin/env python3
import contextlib
import io
import json
import os
import os.path
import sys
import textwrap

__version__ = '0.0.1'

_unique = 1
def unique():
    global _unique
    _unique += 1
    return '_v' + str(_unique)

@contextlib.contextmanager
def indent(out):
    iout = io.StringIO()
    yield iout
    indented = textwrap.indent(iout.getvalue(), '    ')
    out.write(indented)

def convert_identifier(identifier):
    return identifier.replace('.', '__')

def convert_file(get_out_path, path):
    with open(path, 'r') as in_file:
        dump = json.load(in_file)
    for module_name, module_definition in dump.items():
        out_path = get_out_path(module_name)
        out_dir = os.path.dirname(out_path)
        os.makedirs(out_dir, exist_ok=True)
        open(out_dir + '/__init__.py', 'w').close()
        with open(out_path, 'w') as out_file:
            convert_module(out_file, module_name, module_definition)

def convert_module(out, module_name, module_definition):
    print('# Built with pegasus', __version__, file=out)
    print('# Built with psc', module_definition['builtWith'], file=out)

    if len(module_definition['foreign']) != 0:
        print('from . import foreign', file=out)

    for import_ in module_definition['imports']:
        if import_ not in {'Prim', module_name}:
            convert_import(out, import_)

    for decl in module_definition['decls']:
        for name, value in decl.items():
            convert_decl(out, name, value)

def convert_import(out, import_):
    print('import', import_, file=out)

def convert_decl(out, name, value):
    value_id = convert_value(out, value)
    print(name, '=', value_id, file=out)

def convert_value(out, value):
    if value[0] == 'Literal':
        return convert_literal_value(out, value[1])
    elif value[0] == 'Var':
        return convert_identifier(value[1])
    elif value[0] == 'Abs':
        function_id = unique()
        print('def {}({}):'.format(function_id, convert_identifier(value[1])), file=out)
        with indent(out) as iout:
            result_id = convert_value(iout, value[2])
            print('return', result_id, file=iout)
        return function_id
    elif value[0] == 'App':
        function_id = convert_value(out, value[1])
        argument_id = convert_value(out, value[2])
        result_id = unique()
        print('{} = {}({})'.format(result_id, function_id, argument_id), file=out)
        return result_id
    elif value[0] == 'Case':
        scrutinee_pys = [convert_value(out, scrutinee) for scrutinee in value[1]]
        result_id = unique()
        for i, case in enumerate(value[2]):
            condition, assignments = convert_binders(scrutinee_pys, case[0])
            print('{} {}:'.format('if' if i == 0 else 'elif', condition), file=out)
            with indent(out) as iout:
                iout.write(assignments)
                case_result_id = convert_value(iout, case[1])
                print('{} = {}'.format(result_id, case_result_id), file=iout)
        print('else:', file=out)
        print('    raise ValueError({})'.format(repr('Non-exhaustive case expression')), file=out)
        return result_id
    elif value[0] == 'Constructor':
        print('class {}:'.format(value[2]), file=out)
        with indent(out) as iout:
            print('__slots__ = {}'.format(tuple(value[3])), file=iout)
            print('def __init__({}):'.format(', '.join(['self'] + value[3])), file=iout)
            for key in value[3]:
                print('    self.{} = {}'.format(key, key), file=iout)
            print('    pass', file=iout)
        return value[2]
    elif value[0] == 'Accessor':
        record_id = convert_value(out, value[2])
        result_id = unique()
        print('{} = {}[{}]'.format(result_id, record_id, repr(value[1])), file=out)
        return result_id
    else:
        print('TODO({})'.format(value[0]), file=out)
        return unique()

def convert_literal_value(out, value):
    if value[0] == 'ArrayLiteral':
        ids = [convert_value(out, entry) for entry in value[1]]
        result_id = unique()
        print('{} = ['.format(result_id), file=out)
        for entry_id in ids:
            print('    {},'.format(entry_id), file=out)
        print(']', file=out)
        return result_id
    elif value[0] == 'ObjectLiteral':
        ids = {okey: convert_value(out, ovalue)
               for okey, ovalue in value[1].items()}
        result_id = unique()
        print('{} = {{'.format(result_id), file=out)
        for key, value_id in ids.items():
            print('    {}: {},'.format(repr(key), value_id), file=out)
        print('}', file=out)
        return result_id
    elif value[0] == 'BooleanLiteral':
        return repr(value[1])
    elif value[0] == 'StringLiteral':
        return repr(value[1])
    elif value[0] == 'IntLiteral':
        return repr(value[1])
    elif value[0] == 'NumberLiteral':
        return repr(float(value[1]))
    else:
        print('TODO({})'.format(value[0]), file=out)
        return unique()

def convert_binders(scrutinee_pys, binders):
    all_conditions = 'True'
    all_assignments = ''
    for scrutinee_py, binder in zip(scrutinee_pys, binders):
        condition, assignments = convert_binder(scrutinee_py, binder)
        all_conditions += ' and ' + condition
        all_assignments += assignments
    return all_conditions, all_assignments

def convert_binder(scrutinee_py, binder):
    if binder == 'NullBinder':
        return 'True', ''
    elif binder[0] == 'VarBinder':
        return 'True', '{} = {}\n'.format(binder[1], scrutinee_py)
    elif binder[0] == 'LiteralBinder':
        return convert_literal_binder(scrutinee_py, binder[1])
    elif binder[0] == 'ConstructorBinder':
        all_conditions = 'isinstance({}, {})'.format(scrutinee_py, binder[2])
        all_assignments = ''
        for i, entry in enumerate(binder[3]):
            entry_scrutinee_py = '{}.value{}'.format(scrutinee_py, i)
            condition, assignments = convert_binder(entry_scrutinee_py, entry)
            all_conditions += ' and ' + condition
            all_assignments += assignments
        return all_conditions, all_assignments
    else:
        return 'TODO({})'.format(binder[0]), ''

def convert_literal_binder(scrutinee_py, binder):
    if binder[0] == 'BooleanLiteral':
        return '{} == {}'.format(scrutinee_py, repr(binder[1])), ''
    elif binder[0] == 'ArrayLiteral':
        all_conditions = 'len({}) == {}'.format(scrutinee_py, repr(len(binder[1])))
        all_assignments =  ''
        for i, entry in enumerate(binder[1]):
            entry_scrutinee_py = '{}[{}]'.format(scrutinee_py, repr(i))
            condition, assignments = convert_binder(entry_scrutinee_py, entry)
            all_conditions += ' and ' + condition
            all_assignments += assignments
        return all_conditions, all_assignments
    else:
        return 'TODO({})'.format(binder[0]), ''

def main(argv):
    for in_path in argv[1:]:
        def get_out_path(module_name):
            return 'pegasus_output/' + module_name.replace('.', '/') + '.py'
        convert_file(get_out_path, in_path)
    return 0

if __name__ == '__main__':
    sys.exit(main(sys.argv))
